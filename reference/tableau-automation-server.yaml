openapi: 3.1.0
info:
  title: Tableau Automation Server
  version: '1.0'
  description: A Flask server used to respond to Tableau webhooks for automation and notifications
  summary: A Flask server used to respond to Tableau webhooks for automation and notifications
  license:
    name: MIT
    identifier: MIT
  contact:
    name: stelloprint
    url: 'https://github.com/stephenlprice'
servers:
  - url: 'https://your-server-domain'
    description: Automation Server
paths:
  /webhook:
    post:
      summary: Webhooks
      tags: []
      responses:
        '202':
          description: Accepted
        '400':
          description: Bad Request
      operationId: post-webhook
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: webhooks payload
              properties:
                resource:
                  type: string
                  example: WORKBOOK
                event_type:
                  type: string
                  example: WorkbookRefreshSucceeded
                resource_name:
                  type: string
                  example: My Workbook
                site_luid:
                  type: string
                  format: uuid
                  example: 8b2a95d8-52b9-40a4-8712-cd6da771bd1b
                resource_luid:
                  type: string
                  format: uuid
                  example: 8b2a95d8-52b9-40a4-8712-cd6da771bd1b
                created_at:
                  type: string
                  format: date-time
                  example: '2018-11-15T17:14:45Z'
              required:
                - resource
                - event_type
                - resource_name
                - site_luid
                - resource_luid
                - created_at
            examples:
              Webhooks Payload:
                value:
                  resource: WORKBOOK
                  event_type: WorkbookRefreshSucceeded
                  resource_name: My Workbook
                  site_luid: 8b2a95d8-52b9-40a4-8712-cd6da771bd1b
                  resource_luid: 8b2a95d8-52b9-40a4-8712-cd6da771bd1b
                  created_at: '2018-11-15T17:14:45Z'
        description: 'When one of the subscribed events fires, a JSON payload is sent to the URL that is configured. The payloads are the same format for all events but the content in the fields varies based on the event type.'
      description: |-
        Webhooks are a common method whereby one computer system can notify another that an event has occurred using standard web technologies such as HTTP and JSON.

        With Tableau Webhooks, you have the ability to automatically trigger these workflows. When events happen in Tableau, a notification can be sent wherever you want, triggering a workflow. Here are some examples of what you can do with Webhooks:

        - When an extract refresh fails, file a ticket in ServiceNow automatically.
        - When a workbook is updated, notify your team via their Slack channel.
        - When a data source is published, email a data steward asking them to review and certify it.
        - When a workbook refresh completes successfully, generate a PDF and post it to SharePoint.

        System and Site Admins have the ability to create and manage Webhooks within a Site using the Webhooks REST API. You can write your own code to do this or use the [Tableau Webhooks Postman collection](https://github.com/tableau/webhooks-docs).
  /auth:
    post:
      summary: Authenticate
      tags: []
      responses: {}
      operationId: post-auth
      description: |-
        Receives requests from frontend applications for authentication tokens to be used for accessing Tableau functionality such as displaying embedded content or accessing the Tableau's REST API.

        Responds with either a JWT used for Connected Apps authentication of embedded Tableau views or an API Key for interaction with Tableau's REST API. Therefore this endpoints supports:

        - Signing JWTs with scopes defined for embedding or REST API requests
        - PAT (personal access token) authentication to the REST API
        - Username and password authentication to the REST API
        - Optional impersonation of users for authentication to the REST API

        For modular web applications that do not rely on a single backend server as is the case with MVC or monolith architecture, this microservice will allow your project to have a secure location for secrets, tokens and passwords required to interact with a Tableau environment.
      requestBody:
        $ref: '#/components/requestBodies/Authenticate'
components:
  schemas:
    Authenticate:
      title: Authenticate
      x-stoplight:
        id: m5uneqzor6myd
      type: object
      examples: []
      description: 'Describes the requested authentication to Tableau Services by a client, such as is required for displaying embedded views or sending requests to Tableau''s REST API.'
      properties:
        type:
          type: string
          example: jwt
          enum:
            - jwt
            - pat
            - password
          default: jwt
        credentials:
          oneOf:
            - $ref: '#/components/schemas/JWT'
            - $ref: '#/components/schemas/PAT'
            - $ref: '#/components/schemas/Password'
      required:
        - type
        - credentials
    JWT:
      title: JWT
      x-stoplight:
        id: 5i4erjqu0lhk7
      type: object
      properties:
        username:
          type: string
          example: user@email.com
        usage:
          type: string
          enum:
            - embed
            - rest
          example: rest
          default: rest
        scopes:
          type: array
          uniqueItems: true
          minItems: 1
          items:
            type: string
            example: 'tableau:datasources:create'
            enum:
              - 'tableau:datasources:create'
              - 'tableau:content:read'
              - 'tableau:datasources:update'
              - 'tableau:tasks:run'
              - 'tableau:flows:create'
              - 'tableau:metrics:delete'
              - 'tableau:metrics:download'
              - 'tableau:metrics:update'
              - 'tableau:views:download'
              - 'tableau:workbooks:create'
              - 'tableau:workbooks:download'
              - 'tableau:workbooks:update'
              - 'tableau:file_uploads:create'
              - 'tableau:groups:update'
              - 'tableau:users:create'
              - 'tableau:groups:read'
              - 'tableau:users:read'
              - 'tableau:groups:update'
              - 'tableau:users:delete'
              - 'tableau:users:update'
              - 'tableau:groups:create'
              - 'tableau:groups:delete'
              - 'tableau:projects:create'
              - 'tableau:projects:delete'
              - 'tableau:content:read'
              - 'tableau:projects:update'
              - 'tableau:permissions:update'
              - 'tableau:permissions:delete'
              - 'tableau:permissions:read'
              - 'tableau:sites:update'
      required:
        - scopes
    PAT:
      title: PAT
      x-stoplight:
        id: x5ilttl9g0rtf
      type: object
      properties:
        impersonate:
          type: boolean
          default: false
        username:
          type: string
          example: user@email.com
      required:
        - impersonate
    Password:
      title: Password
      x-stoplight:
        id: ug2h2smpcgwyt
      type: object
      properties:
        impersonate:
          type: boolean
          default: false
        username:
          type: string
          example: user@email.com
        password:
          type: string
          format: password
      required:
        - impersonate
    Session:
      title: Session
      x-stoplight:
        id: hma68sgvf9mnu
      type: object
      properties:
        site_name:
          type: string
          example: my-tableau-site
        api_version:
          type: string
          example: '3.16'
          default: '3.16'
        site_id:
          type: string
          format: uuid
          example: 8b2a95d8-52b9-40a4-8712-cd6da771bd1b
        paths:
          type: object
          required:
            - classic
            - new
          properties:
            classic:
              type: string
              example: '{server}/api/{api-version-number}'
              format: uri
            new:
              type: string
              format: uri
              example: '{server}/api/-'
        session_type:
          type: string
          enum:
            - rest
            - embed
          example: rest
        session_minutes:
          type: string
          format: duration
          default: 240
          example: '240'
        session_date:
          type: string
          format: date-time
          example: '{server}/api/-'
        api_key:
          type: string
          example: 8b2a95d8-52b9-40a4-8712-cd6da771bd1b
      required:
        - site_name
        - api_version
        - site_id
        - paths
        - session_type
        - session_minutes
        - session_date
        - api_key
      description: A session object containing an API key for authentication to embedded views or interaction with Tableau's REST API. Contains additional metadata that will be useful for client applications
  requestBodies:
    Authenticate:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Authenticate'
  securitySchemes: {}
  responses:
    Authenticate:
      description: Example response
      content:
        application/json:
          schema:
            properties:
              id:
                type: string
x-internal: false
